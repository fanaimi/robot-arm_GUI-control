#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('test2:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);





/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



/**
 * Setting Socket.io
 */

var io = require("socket.io")(server);


  var j5 = require("johnny-five");
  var _port = "/dev/tty.usbmodem1411"
      ,   _board = new j5.Board(_port)
      ,   _pin = 9
      ,   _pin1 = 10
      ,   _pin2 = 11
      ,   _pin3 = 12

      ,   _xServo
      ,   _yServo
      ,   _zServo
      ,   _cServo

      , angles = {
          xAngle : 90 ,
          yAngle : 90 ,
          zAngle : 90 ,
          cAngle : 125
        }
  ;



  console.log('wait for the board to be ready...');

_board.on("ready", function() {
  $$this = this;
  io.on("connection", function(socket) {
    socket.emit('boardReady');
    console.log("board ready.");

    _xServo = new j5.Servo(_pin);
    _yServo = new j5.Servo(_pin1);
    _zServo = new j5.Servo(_pin2);
    _cServo = new j5.Servo(_pin3);


    var  servos = {
      "xAngle" : _xServo,
      "yAngle" : _yServo,
      "zAngle" : _zServo,
      "cAngle" : _cServo
    };

    $$this.repl.inject({
      board   : _board
      , s       : _xServo
      , s1       : _yServo
      , s2       : _zServo
      , s3       : _cServo
    });

      _xServo.to(angles.xAngle, 500);
      _yServo.to(angles.yAngle, 500);
      _zServo.to(angles.zAngle, 500);
      _cServo.to(angles.cAngle, 500);



    socket.on("moveArm", function (data) {
      servos[data.param].to(data.val);

      console.log(data);
    });// on moveArm

  });// on socket connection
});// BOARD READY




